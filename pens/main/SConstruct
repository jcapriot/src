import os, sys, string, types
sys.path.append('../../framework')
import bldutil

src = 'do  init_  main_ proc_'

pens = 'vp xt x11 ps ras gd cr ogl'

try: # distribution version
    Import('env root pkgdir libdir bindir')
    env = env.Clone()
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../genlib/SConstruct')

libprefix = env.get('DYNLIB','')

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../utilities','../genlib','../../lib'],
            LIBS=['genpen', 'penutil', 
		  libprefix+'rsfplot', libprefix+'rsf'])

env['PROGPREFIX'] = ''

sources = [x+'vplot' for x in Split(src)]

objects = []
for source in sources:
    env.RSF_Include(source,prefix='pen_')
    obj = env.StaticObject(source+'.c')
    env.Depends(obj,source+'.h')
    env.Ignore(source+'.h',source+'.h')
    objects.append(obj)

docalias = {}
sfpen = env.get('SFPEN')

mains = []
placs = []

# vppen
#######

env.RSF_Include('vppen',prefix='pen_')
obj = env.StaticObject('vppen.c')
env.Depends(obj,['vppen.h','../include/gendoc.h','_vp.h'])
env.Ignore('vppen.h','vppen.h')
main = env.Program('vppen',[obj,]+objects)
mains.append(main)

# xtpen
#######

inc = env.get('XINC')
lib = env.get('XLIBPATH')

env.RSF_Include('xtpen',prefix='pen_')
env.Ignore('xtpen.h','xtpen.h')

if inc and lib:
    obj = env.StaticObject('xtpen.c',CPPPATH=env.get('CPPPATH',[])+inc)
    env.Depends(obj,['xtpen.h','../include/gendoc.h','_vp.h'])
    xtmain = env.Program('xtpen',[obj,]+objects,
                         LIBPATH=env.get('LIBPATH',[])+lib,
                         LIBS=env.get('XLIBS',[])+env.get('LIBS',[]))
else:
    xtmain = env.RSF_Place('xtpen',None,
                           var='XINC and XLIBPATH',package='libXaw-devel')
    placs.append(xtmain)

mains.append(xtmain)

# x11pen
#######
env.RSF_Include('x11pen',prefix='pen_')
env.Ignore('x11pen.h','x11pen.h')

if inc and lib:
    obj = env.StaticObject('x11pen.c',CPPPATH=env.get('CPPPATH',[])+inc)
    env.Depends(obj,['x11pen.h','../include/gendoc.h','_vp.h'])
    main = env.Program('x11pen',[obj,]+objects,
                       LIBPATH=env.get('LIBPATH',[])+lib,
                       LIBS=env.get('XLIBS',[])+env.get('LIBS',[]))
else:
    main = env.RSF_Place('x11pen',None,var='XINC and XLIBPATH')
    placs.append(main)

mains.append(main)

# pspen
#######

env.RSF_Include('pspen',prefix='pen_')
obj = env.StaticObject('pspen.c')
env.Depends(obj,['pspen.h','../include/gendoc.h','_vp.h'])
env.Ignore('pspen.h','pspen.h')
main = env.Program('pspen',[obj,]+objects)
mains.append(main)

# raspen
#######

env.RSF_Include('raspen',prefix='pen_')
env.Ignore('raspen.h','raspen.h')

for pen in ('ppm','tiff','jpeg'):
    cap = pen.upper()
    name = pen+'pen'
    lib = env.get(cap)

    if lib:
        path = env.get(cap+'PATH')
        defines = env.get('CPPDEFINES',[])+['_'+cap]
        if path:    
            obj = env.StaticObject(name+'.o','raspen.c',
                                   CPPPATH=env.get('CPPPATH',[])+[path],
                                   CPPDEFINES=defines)
        else:
            obj = env.StaticObject(name+'.o','raspen.c',
                                   CPPDEFINES=defines)
        env.Depends(obj,['raspen.h','../include/gendoc.h','_vp.h'])
        main = env.Program(name,[obj,]+objects,
                           LIBS=[lib]+env.get('LIBS',[]))
    else:
        main = env.RSF_Place(name,None,var=cap,
                         package={'ppm':'libnetpbm-devel',
                                  'tiff':'libtiff-devel',
                                  'jpeg':'libjpeg-devel'}[pen])
        placs.append(main)

    mains.append(main)
    docalias['sf'+name]='sfraspen'

# gdpen
#######

gd = env.get('GD')
# Ability to save animated GIFS
gifanim = env.get('GIFANIM')
# Ability to save MPEG movies
ffmpeg = env.get('FFMPEG')

env.RSF_Include('gdpen',prefix='gd_')
env.Ignore('gdpen.h','gdpen.h')

if gd:
    path =  env.get('CPPPATH',[])
    defines = env.get('CPPDEFINES',[])
    libs = [gd]+env.get('LIBS',[])

    if gifanim:
        defines += ['GIFANIM']
    
    if ffmpeg:
        ffmpegpath = env.get('FFMPEGPATH',[])
        if type(ffmpegpath) is not types.ListType:
            ffmpegpath = Split(ffmpegpath)
        if type(ffmpeg) is not types.ListType:
            ffmpeg = Split(ffmpeg)
        path += ffmpegpath
        defines += ['FFMPEG']
        libs += ffmpeg
        
    obj = env.StaticObject('gdpen.o','gdpen.c',
                           CPPPATH=path,
                           CPPDEFINES=defines)
    env.Depends(obj,['gdpen.h','../include/gendoc.h','_vp.h'])
    main = env.Program('gdpen',[obj,]+objects,LIBS=libs)
else:
    main = env.RSF_Place('gdpen',None,var='GD',package='libgd2-noxpm-dev')
    placs.append(main)

mains.append(main)

# crpen
#######

env.RSF_Include('crpen',prefix='pen_')
env.Ignore('crpen.h','crpen.h')
path = env.get('CAIROPATH')

for pen in ('png','pdf','svg'):
    cap = pen.upper()
    name = pen+'pen'
    lib = env.get('CAIRO'+cap)

    if lib:
        defines = env.get('CPPDEFINES',[])+['_'+cap]
        if path:    
            obj = env.StaticObject(name+'.o','crpen.c',
                                   CPPPATH=env.get('CPPPATH',[])+[path],
                                   CPPDEFINES=defines)
        else:
            obj = env.StaticObject(name+'.o','crpen.c',
                                   CPPDEFINES=defines)
        env.Depends(obj,['crpen.h','../include/gendoc.h','_vp.h'])
        main = env.Program(name,[obj,]+objects,
                           LIBS=[lib]+env.get('LIBS',[]))
    else:
        main = env.RSF_Place(name,None,var='CAIRO-'+cap,pakage='cairo')
        placs.append(main)

    mains.append(main)
    docalias['sf'+name]='sfcrpen'

# oglpen
#######

ogl = env.get('OPENGL')
oglflags = env.get('OPENGLFLAGS')
oglpath = env.get('OPENGLPATH')

env.RSF_Include('oglpen',prefix='ogl_')
env.Ignore('oglpen.h','oglpen.h')

if ogl or oglflags:
    if type(ogl) is not types.ListType:
        ogl = Split(ogl)
    if oglflags:
        if type(oglflags) is not types.ListType:
            oglflags = Split(oglflags)
    obj = env.StaticObject('oglpen.c',
                           CPPPATH=[oglpath]+env.get('CPPPATH',[]))
    env.Depends(obj,['oglpen.h','../include/gendoc.h','_vp.h']) 
    oglmain = env.Program('oglpen',[obj,]+objects,
                       LIBS=[ogl]+env.get('LIBS',[]),
                       LINKFLAGS=[oglflags]+Split(env.get('LINKFLAGS',[])))
else:
    oglmain = env.RSF_Place('oglpen',None,var='OPENGL',package='freeglut-devel')
    placs.append(oglmain)

mains.append(oglmain) 

if root:
    for main in mains:
        install = env.Install(bindir,main[0])

        if not main in placs and libprefix and env['PLATFORM'] == 'darwin':
            env.AddPostAction(install,
            '%s -change build/api/c/libdrsf.dylib '
            '%s/libdrsf.dylib %s' % \
                (WhereIs('install_name_tool'),libdir,install[0]))
            env.AddPostAction(install,
            '%s -change build/plot/lib/libdrsfplot.dylib '
            '%s/libdrsfplot.dylib %s' % \
                (WhereIs('install_name_tool'),libdir,install[0]))

    # define sfpen
        
    if 'oglpen' == sfpen:
        main = oglmain
        docalias['sfpen']='sfoglpen'
    elif 'xtpen' == sfpen:
        main = xtmain
        docalias['sfpen']='sfxtpen'
    else:
        main = None

    if main:
        install = env.InstallAs(os.path.join(bindir,'sfpen'),main[0])
        if not main in placs and libprefix and env['PLATFORM'] == 'darwin':
            env.AddPostAction(install,
                              '%s -change build/api/c/libdrsf.dylib '
                              '%s/libdrsf.dylib %s' % \
             (WhereIs('install_name_tool'),libdir,install[0]))
            env.AddPostAction(install,
            '%s -change build/plot/lib/libdrsfplot.dylib '
            '%s/libdrsfplot.dylib %s' % \
             (WhereIs('install_name_tool'),libdir,install[0]))
            
######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:    
    main = 'sfpens.py'

    pens = [x+ 'pen' for x in Split(pens)]

    for pen in pens:
        env.Command('M'+pen+'.c',[pen+'.c','init_vplot.c'],
                    'cat $SOURCES > $TARGET')
        if pen == env.get('SFPEN'):
            env.Command('Msfpen.c',[pen+'.c','init_vplot.c'],
                    'cat $SOURCES > $TARGET')
    
    docs = [env.Doc(prog,'M'+prog,strip=1) for prog in pens]
    env.Depends(docs,'#/framework/rsf/doc.py')
    doc = env.RSF_Docmerge(main,docs,alias=docalias)

    env.Install('../../framework/rsf',doc)
    env.Install(pkgdir,doc)
