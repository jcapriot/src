import os, sys, string
sys.path.append('../../framework')
import bldutil

#############################################################################
# MAIN LIBRARY
#############################################################################
psrc = Split('axis coltab contour gainpar plot stdplot vplot')

try: # distribution version
    Import('env root libdir incdir pkgdir')
    env = env.Clone()
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../../api/c/SConstruct')

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'])

dynlib = ('-static-intel' not in env.get('LINKFLAGS',''))
##############################################################################
# INCLUDES
##############################################################################
includes = [x+'.h' for x in psrc]

objects = []
dobjects = []

for source in psrc:
    env.RSF_Include(source,prefix='vp_')

    obj = env.StaticObject(source+'.c')
    env.Depends(obj,source+'.h')
    env.Ignore(source+'.h',source+'.h')
    objects.append(obj)

    if dynlib:
        obj = env.SharedObject(source+'.c')
        env.Depends(obj,source+'.h')
        dobjects.append(obj)

##############################################################################
# MAIN LIBRARY
##############################################################################
slib = env.StaticLibrary('rsfplot',objects)
inc = env.Command('rsfplot.h',includes,Action(bldutil.__merge))
env.Install('../../lib',slib)   
env.Install('../../include',inc)

if dynlib:
    dlib = env.SharedLibrary('rsfplot',dobjects,
                         SHLIBPREFIX='libd',
                         LIBS=['drsf']+env.get('LIBS',[]))
    env.Install('../../lib',dlib)

if root:
    libs = [slib]
    if dynlib:
        libs.append(dlib)
    install = env.Install(libdir,libs)
    env.Install(incdir,inc)

    for color in Split('''
        cubeyf1 gist_earth izoaz linearlfb lb montag owb rwb seismic spectral
        viridis
        '''):
        env.Install(incdir,color+'.csv')

    if dynlib and env['PLATFORM'] == 'darwin':                
        env.AddPostAction(install,
                          '%s -change build/api/c/libdrsf.dylib '
                          '%s/libdrsf.dylib %s/%s' % \
                              (WhereIs('install_name_tool'),
                               libdir,libdir,dlib[0]))

api = env.get('API',[])

##############################################################################
# FORTRAN-77 BINDING
##############################################################################
if 'f77' in api:
    env.Object('fortran.o','fortran.c',
               CPPDEFINES=env.get('CPPDEFINES',[])+['$CFORTRAN'])
    libf = env.StaticLibrary('rsfplotf','fortran.o')
    if root:
        env.Install(libdir,libf)

##############################################################################
# TESTING
##############################################################################
for file in ('axis','stdplot'):
    test = 'Test' + file + '.c'
    env.Program([test,slib],PROGSUFFIX='.x',PROGPREFIX='',
                LIBS=[env.get('DYNLIB','')+'rsf']+env.get('LIBS',[]))
        
if root:
    main = 'sflibplot.py'

    env.Command('Mstdplot.c',['stdplot.c','gplot.c'],
                'cat $SOURCES > $TARGET')

    docs = [env.Doc('stdplot','Mstdplot')]
    env.Depends(docs,'#/framework/rsf/doc.py')
    doc = env.RSF_Docmerge(main,docs)

    env.Install('../../framework/rsf',doc)
    env.Install(pkgdir,doc)
