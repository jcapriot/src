import os, sys, re, string, shutil
sys.path.append('../../framework')
import bldutil

progs = 'boolcmp thr sort set2zero fileheader'
cpp_progs = ''
py_progs = 'fdct killtraces jitter'
py_mods = 'hegilles'

try:  # distributed version
    Import('env root pkgdir bindir')
    env = env.Clone()
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../../api/c/SConstruct')

src = Glob('[a-z]*.c')

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=[env.get('DYNLIB','')+'rsf'])

for source in src:
    inc = env.RSF_Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Ignore(inc,inc)
    env.Depends(obj,inc)

mains = Split(progs)
for prog in mains:
    sources = ['M' + prog]
    bldutil.depends(env,sources,'M'+prog)
    prog = env.Program(prog,[x + '.c' for x in sources])
    if root:
        env.Install(bindir,prog)

######################################################################
# PROGRAMS WHICH NEED SPECIFIC API
######################################################################
api = env.get('API',[])

######################################################################
# C++ PROGRAMS
######################################################################
if 'c++' in api:
    cpp_mains = Split(cpp_progs)
    
    for prog in cpp_mains:
        # compilation
        main = env.Program(prog + '.cc',
                           LIBS=['rsf++']+env.get('LIBS',[]))
        
        if root:
            env.Install(bindir,main[0])
else:
    cpp_mains = [] 

######################################################################
# PYTHON PROGRAMS
######################################################################
if root:
    user = os.path.basename(os.getcwd())
	
    # Python main programs
    py_mains = Split(py_progs)
    for prog in py_mains:
        # no compilation but rename
        env.InstallAs(os.path.join(bindir,'sf'+prog),'M'+prog+'.py')

    # Python modules    
    rsfuser = os.path.join(pkgdir,'user')
    for module in Split(py_mods):
        env.Install(rsfuser,module+'.py')

######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user
    
    docs = [env.Doc(prog,'M' + prog) for prog in mains] + \
           [env.Doc(prog+'.cc') for prog in cpp_mains] + \
           [env.Doc(prog,'M'+prog+'.py',lang='python') for prog in py_mains]
    env.Depends(docs,'#/framework/rsf/doc.py')
    doc = env.RSF_Docmerge(main,docs)
    env.Install(pkgdir,doc)
