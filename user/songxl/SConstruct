
import os, sys, re, string, glob
sys.path.append('../../framework')
import bldutil

progs = '''
wave1 wave4 wave124 sbd waveab wave2dss
wavefft1 pspig ffd1
                                 fdb1 fd2bs
                                 pspifcos2bs
                                 ffdcos2b
                                 ffdantti4b_smsr ffd2_ps
laplace laplace2
ffd2dehf sp
ofd1 fd1 ofd1_5 fd1_5 ofd2_5 ofd2_7 ofd2_13 ofd2_10 fd2_10
ofd2_25 lfd2_25b
lffd1_10 lffd2_an_25
nxtfftn orthowave
ffd2_den_omp
ffd0
lffd2an25
phasescan
orp
ffdtti2
'''
# differenciate

mpi_progs = 'tti4rtm ffdrtm ffdrtms mpiffdrtmto ttirtmsa'


ccprogs = 'ortholr ortlr orthollr ortllr lfdc1 lfdc2_7 lfdc2_25 lfdanc2_25 lffdan lfdp1 lfdp2 ormatrix'


try:  # distributed version
    Import('env root pkgdir bindir')
    env = env.Clone()
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../lexing/SConstruct')

src = Glob('[a-z]*.c')

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=[env.get('DYNLIB','')+'rsf'])

fftw = env.get('FFTWOMP')
if fftw:
    env.Prepend(CPPDEFINES=['SF_HAS_FFTW'])

for source in src:
    inc = env.RSF_Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Ignore(inc,inc)
    env.Depends(obj,inc)

mains = Split(progs)
for prog in mains:
    sources = ['M' + prog]
    bldutil.depends(env,sources,'M'+prog)
    prog = env.Program(prog,[x + '.c' for x in sources])
    if root:
        env.Install(bindir,prog)

mpicc = env.get('MPICC')

mpi_mains = Split(mpi_progs)
for prog in mpi_mains:
    sources = ['M' + prog]
    bldutil.depends(env,sources,'M'+prog)
    if mpicc:
        prog = env.Program(prog,[x + '.c' for x in sources],CC=mpicc)
    else:
        prog = env.RSF_Place('sf'+prog,None,var='MPICC',package='mpi')
    if root:
        env.Install(bindir,prog)

if 'c++' in env.get('API',[]):
    lapack = env.get('LAPACK')
else:
    lapack = None

if lapack:
    libsxx = [env.get('DYNLIB','')+'rsf++','vecmatop']
    if not isinstance(lapack,bool):
        libsxx.extend(lapack)
    env.Prepend(LIBS=libsxx)

ccmains = Split(ccprogs)
for prog in ccmains:
    sources = ['M' + prog]
    if lapack:
        prog = env.Program(prog,[x + '.cc' for x in sources])
    else:
        prog = env.RSF_Place('sf'+prog,None,var='LAPACK',package='lapack')
    if root:
        env.Install(bindir,prog)
######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user

    docs = [env.Doc(prog,'M' + prog) for prog in mains+mpi_mains] + \
           [env.Doc(prog,'M%s.cc' % prog,lang='c++') for prog in ccmains]
    env.Depends(docs,'#/framework/rsf/doc.py')
    doc = env.RSF_Docmerge(main,docs)
    env.Install(pkgdir,doc)
