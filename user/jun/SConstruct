import os, sys, re, string
sys.path.append('../../framework')
import bldutil

progs = '''
velxf velinvww
'''

try:  # distributed version
    Import('env root pkgdir bindir')
    env = env.Clone()
except: # local version
    root = None
    env = bldutil.Debug()
    SConscript('../../api/f90/SConstruct')

F90 = env.get('F90')
api = env.get('API',[])
 
env.Prepend(F90PATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=['rsff90',env.get('DYNLIB','')+'rsf'])
env['LINK']=F90

mains = Split(progs)

for prog in mains:
    sources = ['M' + prog]

    if 'f90' in api and F90:
        bldutil.depends90(env,sources,'M'+prog)
        prog = env.Program(prog,[x + '.f90' for x in sources])
    else:
        prog = env.RSF_Place('sf'+prog,None,var='F90')
        
    if root:
        env.Install(bindir,prog)

######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user
    
    docs = [env.Doc(prog,'M'+prog+'.f90',lang='f90',SCANNERS=[]) for prog in mains]
    env.Depends(docs,'#/framework/rsf/doc.py')
    doc = env.RSF_Docmerge(main,docs)
    env.Install(pkgdir,doc)
