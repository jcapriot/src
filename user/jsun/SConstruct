import os, sys, re, string
sys.path.append('../../framework')
import bldutil

progs = 'fftwave1dd cfftwave1dd cfftwave1in fftwave2p fftwave3p cfftwave2 cfftwave3 cfftexpmig2 fftexp0test fd2d cfftexp2 cfftexp2test fdtacc wcfftexp2 wcfftexp2adj cfftwave2nsps cfftwave2mix2 wavemixop lrosrtm2 lroslsrtm2 stack2d cstack2d fftexp0test lrlsrtm2mpi imagsrc zolsrtm2 initwave2 correctwave2 lrwave2 cmatrix cfftwave1d zortmgmres claplac psp pspmig premig cfftwave2omp lrtti2de clfd1 clfd2 ofd2_test swnorm pspp passive2d swvarimax ccrsym timerev2d lstri2d cubesrc cfftwave2taper fftwave2taper compensate compensatexf acqgeo'
# appimage
# vweks3d2
# revolve_driver
# waveadjtest

libprop = 'fftwave2omp fftwave3omp eweks3d vweks3d xcor2 xcor3 xcor3d mutter3 ewelr3d ewedc3d ewdlr3d eweks3dsecd ewelr3dgrad ewedc3dgrad'

ccprogs = 'tilr2 ortholr3 cortholr3 cisolr2 cisolr2rev cisolr3 ctilr2 cisolr2grad cisolr2abc cisolr2abc1 cisolr1 canisolr2 canisolr2abc fraclr2 zfraclr2 fraclr2test tilrzone ortholrzone zortholr3 zanisolr2 zanisolr2abc clfdc1 clfdc2 clfdc1-bak zisolr2abc clfdc1frac ewelr3 ewedc3p ewedc3s ewdlr3 ewelr3grad'
# nsimage
# ewedc3pgrad ewedc3sgrad cfftrtm3
# vwelr3
# eiktest eiktest2 cisolr1eik eiksol

mpi_progs = 'mpilsrtm mpiewertm mpirtmop mpilsrtmgmres mpilsrtmcg mpircvrtm mpiqrtm mpipfwi'
#for distributed FFTW3
#mpiwave2 mpiwave3 mpifftexp1 mpiwave2kiss mpiwave3kiss mpifftexp1kiss

mpicxx_progs = 'mpicfftrtm'

pyprogs = 'geopar'
pymods = ''

try:  # distributed version
    Import('env root pkgdir bindir libdir incdir')
    env = env.Clone()
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../lexing/SConstruct')

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=[env.get('DYNLIB','')+'rsf'])

fftw = env.get('FFTW')
if fftw:
    env.Prepend(CPPDEFINES=['SF_HAS_FFTW'])

src = Glob('[a-z]*.c')
for source in src:
    inc = env.RSF_Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Ignore(inc,inc)
    env.Depends(obj,inc)

if 'c++' in env.get('API',[]):
    lapack = env.get('LAPACK')
else:
    lapack = None

csrc = Glob('[a-z]*.cc')
for source in csrc:
    inc = env.RSF_Include(source,prefix='')
    env.Ignore(inc,inc)
    if lapack:
        obj = env.StaticObject(source)
        env.Depends(obj,inc)

mpicc = env.get('MPICC')
mpicxx = env.get('MPICXX')
mpi_src = Glob('Q[a-z]*.c')
for source in mpi_src:
    inc = env.RSF_Include(source,prefix='')
    env.Ignore(inc,inc)
    if mpicc:
        obj = env.StaticObject(source,CC=mpicc)
        env.Depends(obj,inc)

mains = Split(progs+' '+libprop)
for prog in mains:
    sources = ['M' + prog]
    bldutil.depends(env,sources,'M'+prog)
    prog = env.Program(prog,[x + '.c' for x in sources])
    if root:
        env.Install(bindir,prog)

mpi_mains = Split(mpi_progs)
for prog in mpi_mains:
    sources = ['M' + prog]
    bldutil.depends(env,sources,'M'+prog)
    if mpicc:
        env.StaticObject('M'+prog+'.c',CC=mpicc)
        #for distributed FFTW3
        #prog = env.Program(prog,map(lambda x: x + '.o',sources),CC=mpicc,LIBS=env.get('LIBS')+['fftw3f_mpi'])
        prog = env.Program(prog,[x + '.o' for x in sources],CC=mpicc)
    else:
        prog = env.RSF_Place('sf'+prog,None,var='MPICC',package='mpi')
    if root:
        env.Install(bindir,prog)


if lapack:
    libsxx = [env.get('DYNLIB','')+'rsf++','vecmatop']
    if not isinstance(lapack,bool):
        libsxx.extend(lapack)
    env.Prepend(LIBS=libsxx)

#ccsubs = 'lowrank.cc fftomp.c rtmutil.c ksutil.c revolve.c'
ccmains = Split(ccprogs)
for prog in ccmains:
    sources = ['M' + prog + '.cc']
#   if prog == 'cfftrtm3':
#       sources += Split(ccsubs)
    if lapack:
        prog = env.Program(prog,sources)
    else:
        prog = env.RSF_Place('sf'+prog,None,var='LAPACK',package='lapack')
    if root:
        env.Install(bindir,prog)


##################################################################################################################
# To use sfmpicfftrtm, one needs to obtain the source file revolve.c from http://dl.acm.org/citation.cfm?id=347846
##################################################################################################################
xxsubs = 'lowrank fftomp rtmutil ksutil revolve'
mpicxx_mains = Split(mpicxx_progs)
for prog in mpicxx_mains:
    sources = ['M' + prog] + Split(xxsubs)
    if FindFile('revolve.c','.') and mpicxx:
        env.StaticObject('M'+prog+'.cc',CXX=mpicxx)
        prog = env.Program(prog,[x + '.o' for x in sources],CXX=mpicxx)
    else:
        prog = env.RSF_Place('sf'+prog,None,var='MPICXX',package='mpi')
    if root:
        env.Install(bindir,prog)

for prog in Split('cmatmult2'):
    sources = ['Test' + prog,prog]
    if prog=='cmatmult2':
        sources.append('cgmres')
    bldutil.depends(env,sources,prog)
    sources = [x + '.o' for x in sources]
    env.Object('Test' + prog + '.c')
    env.Program(sources,PROGPREFIX='',PROGSUFFIX='.x')

######################################################################
# PYTHON METAPROGRAMS (python API not needed)
######################################################################

if root: # no compilation, just rename
    pymains = Split(pyprogs)
    exe = env.get('PROGSUFFIX','')
    for prog in pymains:
        binary = os.path.join(bindir,'sf'+prog+exe)
        env.InstallAs(binary,'M'+prog+'.py')
        env.AddPostAction(binary,Chmod(str(binary),0o755))
    for mod in Split(pymods):
        env.Install(pkgdir,mod+'.py')

######################################################################
# SELF-DOCUMENTATION
######################################################################

if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user

    docs = [env.Doc(prog,'M' + prog) for prog in mains+mpi_mains] +  \
           [env.Doc(prog,'M'+prog+'.py',lang='python') for prog in pymains] + \
           [env.Doc(prog,'M%s.cc' % prog,lang='c++') for prog in ccmains+mpicxx_mains]

    env.Depends(docs,'#/framework/rsf/doc.py')
    doc = env.RSF_Docmerge(main,docs)
    env.Install(pkgdir,doc)
