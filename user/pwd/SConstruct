import os, sys, re, string
sys.path.append('../../framework')
import bldutil

progs = '''
beamform dealias dealias2 dijkstra dip dip2 diplet dips dixshape
explanesignoi expsignoi fdip mdip odip2 ofpwd ofpwd2 opwd2 planemis2 planemis3
planereg2 planereg3 planesignoi pmshape2 predict pwcoh pwd pwd1 pwdix
pwdsigk pwsmooth pwsmooth2 pwpaint pwpaint2 pwspray2 pwspray3 pwdsmooth2
pwpaint3 pwspray pwstack seisigk seislet shapesigk shplanemis2 shplanemis3
timeshift trismooth2 twodip2 distpaint distpaint3D
'''

try:  # distributed version
    Import('env root pkgdir bindir libdir incdir')
    env = env.Clone()
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../../plot/lib/SConstruct')

src = Glob('[a-z]*.c')

dynpre = env.get('DYNLIB','')

libs = [dynpre+'rsf']+env.get('LIBS',[])
dlibs = ['drsf']+env.get('LIBS',[])

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'])

dynlib = ('-static-intel' not in env.get('LINKFLAGS',''))

objects = []
dobjects = []
includes = []
for source in src:
    inc = env.RSF_Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Depends(obj,inc)
    env.Ignore(inc,inc)

    objects.append(obj)
    includes.append(inc)

    if dynlib:
        obj = env.SharedObject(source)
        env.Depends(obj,inc)
        dobjects.append(obj)

lib = env.StaticLibrary('rsfpwd',objects)
inc = env.Command('rsfpwd.h',includes,Action(bldutil.__merge))

env.Install('../../lib',lib)
env.Install('../../include',inc)

if root:
    env.Install(libdir,lib)
    env.Install(incdir,inc)

if dynlib:
    dlib = env.SharedLibrary('rsfpwd',dobjects,SHLIBPREFIX='libd',LIBS=dlibs)
    env.Install('../../lib',dlib)
    if root:
        install = env.Install(libdir,dlib)

        if dynpre and env['PLATFORM'] == 'darwin':
            env.AddPostAction(install,
                              '%s -change build/api/c/libdrsf.dylib '
                              '%s/libdrsf.dylib %s' % \
            (WhereIs('install_name_tool'),libdir,install[0]))

mains = Split(progs)
for prog in mains:
    sources = ['M' + prog]
    bldutil.depends(env,sources,'M'+prog)
    env.StaticObject('M'+prog+'.c')
    prog = env.Program(prog,[x + '.o' for x in sources],LIBS=libs)
    if root:
        install = env.Install(bindir,prog)

        if dynpre and env['PLATFORM'] == 'darwin':
            env.AddPostAction(install,
            '%s -change build/api/c/libdrsf.dylib '
            '%s/libdrsf.dylib %s' % \
                (WhereIs('install_name_tool'),libdir,install[0]))

for prog in Split(
    '''
    allp3 gauss2 matmult predict predict2 pwdsl pwsmooth pwsmooth2 pwsmooth3 pwspray trisl
    '''):
    sources = ['Test' + prog,prog]
    bldutil.depends(env,sources,prog)
    sources = [x + '.o' for x in sources]
    env.Object('Test' + prog + '.c')
    env.Program(sources,PROGPREFIX='',PROGSUFFIX='.x',LIBS=libs)

######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user

    docs = [env.Doc(prog,'M' + prog) for prog in mains]
    env.Depends(docs,'#/framework/rsf/doc.py')

    doc = env.RSF_Docmerge(main,docs)
    env.Install(pkgdir,doc)
