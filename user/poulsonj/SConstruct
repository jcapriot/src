import os, sys, string
sys.path.append('../../framework')
import bldutil

progs = '''
mpipsp
'''

try:  # distributed version
    Import('env root bindir pkgdir')
    env = env.Clone()
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../../api/c++/SConstruct')

if 'c++' in env.get('API',[]):
    psp = env.get('PSPDIR')
else:
    psp = None

if psp:
    pspcxx = env.get('PSPCXX')
    if pspcxx == None:
       pspcxx = env.get('MPICXX')
       if pspcxx == None:
          pspcxx = env.get('CXX')
    psppath = env.get('PSPPATH',[])
    psplibpath = env.get('PSPLIBPATH',[])
    psplibs = env.get('PSPLIBS',[])+list(map(File,env.get('PSPEXTRA',[])))
 
    env.Prepend(CPPPATH=['../../include'],
                LIBPATH=['../../lib'],
                LIBS=[env.get('DYNLIB','')+'rsf++',
                      env.get('DYNLIB','')+'rsf'])
       
    env.Replace(CXX=pspcxx)
    env.Prepend(CPPPATH=psppath,
                LIBPATH=psplibpath,
                LIBS=psplibs)


mains = Split(progs)
for prog in mains:
    sources = ['M' + prog]
    if psp:
        prog = env.Program(prog,[x + '.cc' for x in sources])
    else:
        prog = env.RSF_Place('sf'+prog,None,var='PSPHOME',package='psp')
    if root:
        env.Install(bindir,prog)

######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user
    
    docs = [env.Doc(prog,'M%s.cc' % prog,lang='c++') for prog in Split(progs)]
    env.Depends(docs,'#/framework/rsf/doc.py')
    doc = env.RSF_Docmerge(main,docs)
    env.Install(pkgdir,doc)
#####################################################################
