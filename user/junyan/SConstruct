import os, sys, re, string
sys.path.append('../../framework')
import bldutil

progs = '''
psti2d pamti2d opoti2d opoti3d opame2d sgelfd2dpml sgelfd2dpml2  pame2d
'''

ccprogs = '''opame2dckxx opame2dckxz opame2dckzz osam2dckxx osam2dckxxxx osam2dckxxxz osam2dckxxzz osam2dckxzzz osam2dckzz osam2dckzzzz osam3dckxx osam3dckxxxx osam3dckxxxy osam3dckxxxz osam3dckxxyy osam3dckxxyz  osam3dckxy osam3dckxyyy osam3dckxyyz osam3dckxyzz osam3dckxz osam3dckxzzz osam3dckyy osam3dckyyyy osam3dckyyyz osam3dckyyzz osam3dckyz osam3dckyzzz osam3dckzz osam3dckzzzz 
'''

#  osam3dkxxzz  ffd3d pame3d pamti3d pse2d pse3d psti3d 

try:  # distributed version
    Import('env root pkgdir bindir libdir incdir')
    env = env.Clone()
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../lexing/SConstruct')

src = Glob('[a-z]*.c')

dynpre = env.get('DYNLIB','') ##
 
libs = [dynpre+'rsf']+env.get('LIBS',[]) ##
dlibs = ['drsf']+env.get('LIBS',[])   ##

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=[env.get('DYNLIB','')+'rsf'])

fftw = env.get('FFTW')
if fftw:
    env.Prepend(CPPDEFINES=['SF_HAS_FFTW'])

for source in src:
    inc = env.RSF_Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Ignore(inc,inc)
    env.Depends(obj,inc)

mains = Split(progs)
for prog in mains:
    sources = ['M' + prog]
    bldutil.depends(env,sources,'M'+prog)
    env.StaticObject('M'+prog+'.c')
    prog = env.Program(prog,[x + '.o' for x in sources],
                       LIBS=libs)
    if root:
        env.Install(bindir,prog)

if 'c++' in env.get('API',[]):
    lapack = env.get('LAPACK')
else:
    lapack = None

if lapack:
    libsxx = [env.get('DYNLIB','')+'rsf++','vecmatop']
    if not isinstance(lapack,bool):
        libsxx.extend(lapack)
    env.Prepend(LIBS=libsxx)
 

ccmains = Split(ccprogs)
for prog in ccmains:
    sources = ['M' + prog]
    if lapack:
        prog = env.Program(prog,[x + '.cc' for x in sources])
    else:
        prog = env.RSF_Place('sf'+prog,None,var='LAPACK',package='lapack')
    if root:
        env.Install(bindir,prog)

######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user
    
    docs = [env.Doc(prog,'M' + prog) for prog in mains] +  \
           [env.Doc(prog,'M%s.cc' % prog,lang='c++') for prog in ccmains]

    env.Depends(docs,'#/framework/rsf/doc.py')	
    doc = env.RSF_Docmerge(main,docs)
    env.Install(pkgdir,doc)

