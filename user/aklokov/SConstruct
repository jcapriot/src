import os, sys, re, string, glob
sys.path.append('../../framework')
import bldutil

progs = '''
ditime2d ditime3d
crssemb crssemb3d 
diptaper dvscan2d
pick2d gammapick2d 
pdrscan2d pdr2d
dagap sumamp
taperedge heal
revent rotvol dagtaper
'''
# todel
# pickvert

mpi_progs = ''

ccprogs = 'tmigda dmigda diparti itrace dbfmig diparti3 vsptmigda'

subs = '''
hwt2d support sembler
tmigratorBase tmigrator2D tmigrator3D vsptmigrator2D
dmigratorBase dmigrator2D
curveDefinerBase curveDefinerDipOffset curveDefinerDipOffset3D
iTracer2D
depthBackfitMigrator2D 
'''

try:  # distributed version
    Import('env root pkgdir bindir')
    env = env.Clone()
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../../api/c++/SConstruct')

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=[env.get('DYNLIB','')+'rsf'])

if 'c++' in env.get('API',[]):
    env.Prepend(LIBS=[env.get('DYNLIB','')+'rsf++'])

src = Glob('[a-z]*.c')

for source in src:
    inc = env.RSF_Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Ignore(inc,inc)
    env.Depends(obj,inc)

mains = Split(progs)
for prog in mains:
    sources = ['M' + prog]
    bldutil.depends (env, sources, 'M'+prog)
    prog = env.Program (prog, map (lambda x: x + '.c',sources))
    if root:
        env.Install (bindir, prog)

ccmains = Split(ccprogs)
subs = Split(subs)

if 'c++' in env.get('API',[]):
    objs = [env.StaticObject(x+'.cc') for x in subs]

for prog in ccmains:
    if 'c++' in env.get('API',[]):
        prog = env.Program (prog, ['M'+prog+'.cc'] + objs)
        env.Depends(prog,[x + '.hh' for x in subs])
    else:
        prog = env.RSF_Place ('sf' + prog, None, var='API', package='c++')
    if root:
        env.Install(bindir,prog)
######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user
    
    docs = [env.Doc(prog,'M' + prog) for prog in mains] + \
           [env.Doc(prog,'M%s.cc' % prog, lang='c') for prog in ccmains]
    env.Depends(docs,'#/framework/rsf/doc.py')	
    doc = env.RSF_Docmerge(main,docs)
    env.Install(pkgdir,doc)
