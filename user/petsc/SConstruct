import os, sys, re, string
sys.path.append('../../framework')
import bldutil

progs = '''
aimplfd1
aimplfd2
heatgmres1
petscawefd2d
rtmgeompetsc
wavegeompetsc
'''

try:  # distributed version
    Import('env root pkgdir bindir')
    env = env.Clone()
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../../api/c/SConstruct')

src = Glob('[a-z]*.c')

petscdir = env.get('PETSCDIR')

if petscdir:
    petsccc = env.get('PETSCCC')
    if petsccc == None:
       petsccc = env.get('MPICC')
       if petsccc == None:
          petsccc = env.get('CC')
    petscpath = env.get('PETSCPATH',[])
    petsclibpath = env.get('PETSCLIBPATH',[])
    petsclibs = env.get('PETSCLIBS',[])
        
    env.Replace(CC=petsccc)
    env.Prepend(CPPPATH=petscpath,
                LIBPATH=petsclibpath,
                LIBS=petsclibs)

    env.Prepend(CPPPATH=['../../include'],
                LIBPATH=['../../lib'],
                LIBS=[env.get('DYNLIB','')+'rsf'])

for source in src:
    inc = env.RSF_Include(source,prefix='')
    env.Ignore(inc,inc)
    if petscdir:
        obj = env.StaticObject(source)  
        env.Depends(obj,inc)
    
mains = Split(progs)
for prog in mains:
    if petscdir:
        sources = ['M' + prog]
        bldutil.depends(env,sources,'M'+prog)
        prog = env.Program(prog,[x + '.c' for x in sources])
    else:
        prog = env.RSF_Place('sf'+prog,None,var='PETSCDIR',package='petsc')
    if root:
        env.Install(bindir,prog)

######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user

    docs = [env.Doc(prog,'M' + prog) for prog in mains]
    env.Depends(docs,'#/framework/rsf/doc.py')	
    
    doc = env.RSF_Docmerge(main,docs)
    env.Install(pkgdir,doc)
