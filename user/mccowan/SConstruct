import os, sys, re, string
sys.path.append('../../framework')
import bldutil

progs = '''
dmeig fastft kernel
'''

try:  # distributed version
    Import('env root pkgdir bindir')
    env = env.Clone()
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../../api/c/SConstruct')

src = Glob('[a-z]*.c')

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=[env.get('DYNLIB','')+'rsf'])

for source in src:
    inc = env.RSF_Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Ignore(inc,inc)
    env.Depends(obj,inc)

mains = Split(progs)
for prog in mains:
    sources = ['M' + prog]
    bldutil.depends(env,sources,'M'+prog)
    prog = env.Program(prog,[x + '.c' for x in sources],)
    if root:
        env.Install(bindir,prog)

threads = env.get('PTHREADS')
if threads:
    prog = env.Program('threads','Mthreads.c')
else:
    prog = env.RSF_Place('sfthreads',None,var='PTHREADS')
if root:
    env.Install(bindir,prog[0])

for cfile in Split('dmeig fastfft'):
    test = env.StaticObject('Test' + cfile + '.o', cfile + '.c',
                            CPPDEFINES=env.get('CPPDEFINES',[])+['TEST'])
    prog = env.Program(test,PROGSUFFIX='.x',PROGPREFIX='')

######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user
    
    docs = [env.Doc(prog,'M' + prog) for prog in mains]
    env.Depends(docs,'#/framework/rsf/doc.py')	
    doc = env.RSF_Docmerge(main,docs)
    env.Install(pkgdir,doc)


