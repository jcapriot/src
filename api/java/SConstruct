from __future__ import print_function
# This SConstruct builds and places the JAVA API Jar in the LIB FOLDER
# that is then installed to RSFROOT

import os,sys,platform
sys.path.append('../../framework')
import bldutil

try:
    Import('env root libdir')
    env = env.Clone()
except:
    env = bldutil.Debug()
    root = None
    SConscript('../c/SConstruct')

jdk = env.get('JAVA_HOME')
if not jdk: jdk = env.get('JAVA_SDK')

if not jdk:
    print('Please set the JAVA_HOME or JAVA_SDK environmental variable')
    Exit(1)
    
minesjtk = env.get('MINESJTK')
    
jdk_inc = os.path.join(jdk,'include')

rsf = env.get('RSFROOT')
include = os.path.join(rsf,'include')

module = 'm8r'
oldfiles = Split('Header Writer Reader Par')
files = Split('RSF RSFFile Input Output')
gen = Split('SWIGTYPE_p_int SWIGTYPE_p_sf_complex SWIGTYPE_p_sf_File m8rConstants sf_dataform sf_datatype m8rJNI m8r')

CC = env.get('CC')

if CC.rfind('icc') >= 0:
    CCFLAGS = env.get('CCFLAGS','')+' -D__int64=___int64'
else:
    CCFLAGS = env.get('CCFLAGS','')

pwd = os.getcwd()
include_dirs = [jdk_inc,include]

if sys.platform == 'darwin':
  include_dirs.append(jdk_inc+'/darwin')
elif sys.platform[:5] == 'linux':
  include_dirs.append(jdk_inc+'/linux')

if 'java' in env.get('API',[]) and jdk:
    
    wrap = env.CFile(module,
                     module+'.i',
                     SWIGFLAGS='-package rsf -java -outdir %s' % pwd)

    outsuffix = '.so'
    outfile = 'jrsf'
    if sys.platform == 'darwin':
            outsuffix = '.jnilib'
            outfile = 'libjrsf'
    
    java = env.LoadableModule(outfile,wrap[0],
                              CCFLAGS=CCFLAGS,
                              CPPPATH=include_dirs,
                              LIBS='drsf',
                              LIBPATH='../../lib',
                              LDMODULESUFFIX=outsuffix,
                              FRAMEWORKSFLAGS='-flat_namespace -undefined suppress')
    javafiles = [x+ '.java' for x in files]
    env.Depends(java,javafiles)    
    env.Clean(wrap,[x+'.java' for x in gen])

    if minesjtk:
        env.Java('.',[os.path.join('old',x)+'.java' for x in oldfiles],
                 JAVACLASSPATH=[pwd,minesjtk],JAVACFLAGS='')
    
    # This is really ugly, but its the only command that works...  The
    # Java builder does not work because it scans for the existence of
    # the SWIG generated files prior to them actually being built.
    sources = ' '.join([os.path.join(pwd,x)+ '.java' for x in files+gen])
    classfiles = env.Command(['rsf/'+x+'.class' for x in files], 
                             javafiles+wrap,
                             '${JAVAC}  -cp %s -d %s %s' % (pwd,pwd,sources))
    env.Jar('rsf.jar','rsf',JARCHDIR=pwd)

    env.Install('../../lib','rsf.jar')
    env.Install('../../lib',java)

    if root:
        env.Install(libdir,'rsf.jar')
        env.Install(libdir,java)

