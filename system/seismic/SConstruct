import os, sys, re,  types
sys.path.append('../../framework')
import bldutil

progs = '''
aastack agmig ai2refl avo beamspray cascade c2r cell2 cell3 cgscan
cmp2shot constfdmig2 cos2ang depth2time diffoc diffraction dimag dmo
dsr dsr2 envelope fincon findmo finstack fkamo fkdmo fkgdmo fold
fourvc fourvc0 fourvc2 fowler fowler1 fowler2 freqint freqlet gazdag
gdmo halfint headerattr headermath hwt2d hwtex infill inmo inmo3
inmo3gma intbin intbin3 isin2ang itaupmo itaupmo2 itaupmo3 itxmo
itxmo3 iwarp2 iwarp3 kirchinv kirchnew kirmod kirmod3 lineiko
linsincos migsteep3 modrefl modrefl2 modrefl3 moveout nmo nmo3
nmo3_ort nmodips nmov nmow nmow_adj nmo3gma_adj ovc ovcco ovczo oway1
pmig pnmo pnmo3d pp2psang pp2psang2 pp2pstsic preconstkirch prestolt
ptaupmo3 ptaupmo ptaupmoVTI pveltran map2coh pveltranVTI pveltran3
pyramid radial radial2 radon randrefl rays2 rays2a rays3 refer refl2ai
ricker ricker1 ricker2 rweab rwesrmig rwezomig s2ofz s2ofz2 segyheader
segyread segywrite shifts shoot2 shot2cmp shotconstkirch shotholes
shotprop simivscan sin slant srmva srseidel srsyn sstep2
stacks stolt stolt2 stoltstretch stretch stripes tan2ang taupmo
time2depth tlagtoang2d tshift txpscan txpnmo vczo vczo2 vczo3 velmod
veltran voft vofz vscan xlagtoang2d zoeppritz zomig zomva
'''

libsrc = 'segy'

try:  # distributed version
    Import('env root pkgdir bindir libdir incdir')
    env = env.Clone()
    alias = {'segyread': ['suread'],
             'segywrite': ['suwrite'],
             'stretch': map(lambda x: x+ 'stretch',
                            Split('log t2 t2cheb lmo nmo rad dat scale'))}
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../../su/lib/SConstruct')

src = Glob('[a-z]*.c')

dynlib = env.get('DYNLIB','')

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=[dynlib+'rsf'])

fftw = env.get('FFTW')
if fftw:
    env.Prepend(CPPDEFINES=['SF_HAS_FFTW'])

objects = []
includes = []
for source in src:
        inc = env.RSF_Include(source,prefix='')
        ### legacy - note that "orthovelo.c" has been removed.
        # # clang chokes trying to optimize the compilation of orthovelo
        # if str(source) == 'orthovelo.c' and env['PLATFORM'] == 'darwin':
        #         obj = env.StaticObject(source,CFLAGS=env['CFLAGS']+' -O0')
        #         orthovelo = obj
        # else:
        #         obj = env.StaticObject(source)
        obj = env.StaticObject(source)
        env.Ignore(inc,inc)
        env.Depends(obj,inc)
    
        if os.path.splitext(str(source))[0] in libsrc:
            objects.append(obj)
            includes.append(inc)

mains = Split(progs)

##############################################################################
# LIBRARY
##############################################################################
lib = env.StaticLibrary('rsfsegy',objects)
inc = env.Command('rsfsegy.h',includes,Action(bldutil.__merge))

env.Install('../../lib',lib)
env.Install('../../include',inc)

if root:
    env.Install(libdir,lib)
    env.Install(incdir,inc)

docalias = {}
for prog in mains:
    sources = ['M' + prog]
    bldutil.depends(env,sources,'M'+prog)
    ### legacy - note that "orthovelo.c" has been removed.
    # if prog == 'itxmo3' and env['PLATFORM'] == 'darwin':
    #     sources.remove('orthovelo')
    #     main = env.Program(prog,map(lambda x: x + '.c',sources)+orthovelo)
    # else:
    #     main = env.Program(prog,map(lambda x: x + '.c',sources))
    main = env.Program(prog,map(lambda x: x + '.c',sources))
    if root:
        install = env.Install(bindir,main[0])

        if dynlib and env['PLATFORM'] == 'darwin':
             env.AddPostAction(install,
             '%s -change build/api/c/libdrsf.dylib '
             '%s/libdrsf.dylib %s' % \
             (WhereIs('install_name_tool'),libdir,install[0]))

        if prog in alias.keys():
            for al in Split(alias[prog]):
                other = str(main[0]).replace(prog,al)
                env.InstallAs(os.path.join(bindir,other),main[0])
                doc = os.path.splitext(other)[0]
                docalias[doc] = 'sf'+prog

for prog in Split('cbanded ctridiagonal veltran'):
    sources = ['Test' + prog,prog]
    bldutil.depends(env,sources,prog)
    sources = map(lambda x: x + '.o',sources)
    env.Object('Test' + prog + '.c')
    env.Program(sources,PROGPREFIX='',PROGSUFFIX='.x')
 
######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    main = 'sfseismic.py'
    
    docs = map(lambda prog: env.Doc(prog,'M' + prog),mains)
    env.Depends(docs,'#/framework/rsf/doc.py')	
    doc = env.RSF_Docmerge(main,docs,alias=docalias)

    env.Install('../../framework/rsf',doc)
    env.Install(pkgdir,doc)
