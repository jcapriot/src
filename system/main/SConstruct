import os, sys, string
sys.path.append('../../framework')
import bldutil

progs = '''
add attr cat cconjgrad cconjgradmpi cdottest cdottestmpi cmplx
conjgrad conjgradmpi cp cut dd disfil dottest dottestmpi get headercut
headersort headerwindow in interleave mask math pad put real reverse
rm rotate rtoc scale spike spray stack transp window
'''

try: # distributed version
    Import('env root pkgdir libdir bindir')
    env = env.Clone()
    alias = {'cat':'merge rcat',
             'real':'imag',
             'add':'mul div',
             'stack': 'prod min max',
             'cp':'mv'}
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../../api/c/SConstruct')

dynlib = env.get('DYNLIB','')

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=[dynlib+'rsf'])

mains = Split(progs)

docalias = {}
for prog in mains:
    main = env.Program(prog + '.c')
    
    if root:
        install = env.Install(bindir,main[0])

        if dynlib and env['PLATFORM'] == 'darwin':
            env.AddPostAction(install,
            '%s -change build/api/c/libdrsf.dylib '
            '%s/libdrsf.dylib %s' % \
            (WhereIs('install_name_tool'),libdir,install[0]))
            
        if prog in alias.keys():
            for prog2 in Split(alias[prog]):
                other = str(main[0]).replace(prog,prog2)
                install = env.InstallAs(os.path.join(bindir,other),main[0])

                if dynlib and env['PLATFORM'] == 'darwin':
                    env.AddPostAction(install,
                    '%s -change build/api/c/libdrsf.dylib '
                    '%s/libdrsf.dylib %s' % \
                    (WhereIs('install_name_tool'),libdir,install[0]))

                if env['PLATFORM'] == 'cygwin':
                    other = other.replace('.exe','')
                docalias[other] = 'sf'+prog

mpicc = env.get('MPICC')
if mpicc:
    prog = env.Program('sfmpi','mpi.c',CC=mpicc)
else:
    prog = env.RSF_Place('sfmpi',None,var='MPI')
if root:
    env.Install(bindir,prog[0])
    mains.append('mpi')

omp = env.get('OMP')
if omp:
    prog = env.Program('sfomp','omp.c')
else:
    prog = env.RSF_Place('sfomp',None,var='OMP')
if root:    
    env.Install(bindir,prog[0])
    mains.append('omp')

if root:
    env.Install(bindir,'sfunits')

######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:    
    main = 'sfmain.py'

    docs = [env.Doc(prog) for prog in mains]
    env.Depends(docs,'#/framework/rsf/doc.py')
    doc = env.RSF_Docmerge(main,docs,alias=docalias)

    env.Install('../../framework/rsf',doc)
    env.Install(pkgdir,doc)
