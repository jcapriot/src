from __future__ import print_function
#############################################################################
###################### COMMON DEFINITIONS - DO NOT ALTER ####################
#############################################################################
from rsf.proj import *
from batch import getFlowSignature
from batch import getThreads
import os
#############################################################################
###################### END COMMON DEFINITIONS ###############################
#############################################################################

#'local' : 'export MODULEPATH=/opt/apps/xsede/modulefiles:/opt/apps/modulefiles:/opt/modulefiles; module() { eval $$(/opt/apps/lmod/lmod/libexec/lmod bash "$@");}; module restore;',
######################## LOCAL DEFINITIONS ##################################
penv = {'stampede' :  { 'batch' : 'slurm',
                        'queue' : 'normal',
                        'acct'  : 'FDTD3D-Cont',
                        'mail'  : 'symes@caam.rice.edu',
                        'bcmd'  : '/usr/bin/sbatch',
    'local' : '',
                        'suffix': 'bat', },
         'davinci' :  { 'batch' : 'pbs',
                        'queue' : 'trip',
                        'acct'  : 'symes',
                        'mail'  : 'symes@caam.rice.edu',
                        'bcmd'  : '/usr/bin/qsub',
    'local' : '',
                        'suffix': 'pbs', },
       }

print(penv['stampede']['bcmd'])
######## abbreviations for commands used in flows - put these first, if
######## you use abbreviations
# example:
#          CWPROOT         = os.getenv('CWPROOT')
#          ...
#          sunull          = os.path.join(CWPROOT,'bin/sunull')
RSFSRC          = os.getenv('RSFSRC')
towed_array     = os.path.join(RSFSRC,'trip/iwave/trace/main/towed_array.x')
acd             = os.path.join(RSFSRC,'trip/iwave/acd/main/acd.x')
acdcgne         = os.path.join(RSFSRC,'trip/iwave/acd/main/acdcgne.x')
acdlbfgs        = os.path.join(RSFSRC,'trip/iwave/acd/main/acdlbfgs.x')
acdiva          = os.path.join(RSFSRC,'trip/iwave/acd/main/acdiva.x')
acdds_grad      = os.path.join(RSFSRC,'trip/iwave/acd/main/acdds_grad.x')
acddscheb_grad  = os.path.join(RSFSRC,'trip/iwave/acd/main/acddscheb_grad.x')
acdaltcheb      = os.path.join(RSFSRC,'trip/iwave/acd/main/acdaltcheb.x')
acdadjtest      = os.path.join(RSFSRC,'trip/iwave/acd/main/acdadjtest.x')
helm            = os.path.join(RSFSRC,'trip/iwave/helm/main/helm.x')
deriv           = os.path.join(RSFSRC,'trip/iwave/grid/main/GridDeriv.x')
linmute         = os.path.join(RSFSRC,'trip/iwave/trace/main/linmute.x')

fetches = {
    'line100m.su' : ['marmousi', 'http://www.trip.caam.rice.edu'],
    'hdr6km.su' : ['marmousi', 'http://www.trip.caam.rice.edu'],
    'wavelet_base.su' : ['marmousi', 'http://www.trip.caam.rice.edu'],
    'velocity.HH' : ['marmousi', 'http://www.trip.caam.rice.edu']
}
for file in fetches.keys():
    Fetch(file,fetches[file][0],server=fetches[file][1])

Flow('ocean',None,'makevel n1=141 d1=24 n2=444 d2=24 o1=0 o2=0 v000=1.5 | put data_type=vel data_format=native_float label1=Depth unit1=m label2=Position uni2=m unit=m/ms esize=4',stdin=0)
Flow('vel24base','velocity.HH','dd form=native | window j1=6 j2=6')
Flow('vext','vel24base','window f2=383 n2=1 | spray axis=2 d=24 n=60')
Flow('extv',['vel24base', 'vext'], 'cat axis=2 d=24 ${SOURCES[1]}')
Flow('vel24',['ocean','extv'],'window n1=15 f1=0 | cat axis=1 d=24 ${SOURCES[1]}')
#Flow('sedmts',['vel24','ocean'],'add mode=a scale=1,-1 ${SOURCES[1]}')
#Flow('sedhsm','sedmts','cp ${SOURCES[0]} ${TARGETS[0]}; ' + helm + ' in=${SOURCES[0]} out=${TARGETS[0]} datum=400 power=-1 bc=0 scale1=5.e+5 scale2=5.e+5',stdin=0,stdout=-1)
#Flow('vel24sm',['ocean','sedhsm'],'add mode=1 scale=1,1 ${SOURCES[1]}')
Flow('vel24sm','vel24','smooth rect1=5 rect2=5 repeat=10')
Flow('vel24sm2','vel24','smooth rect1=5 rect2=5 repeat=2')
Flow('vel24sm4','vel24','smooth rect1=5 rect2=5 repeat=4')

Flow('vel24big','vel24','smooth rect1=10 rect2=10 repeat=10')

Flow('csq24','vel24','add mode=p ${SOURCES[0]} |put data_type=csq')
Flow('csq24sm','vel24sm','add mode=p ${SOURCES[0]} |put data_type=csq')
Flow('csq24sm2','vel24sm2','add mode=p ${SOURCES[0]} |put data_type=csq')
Flow('csq24big','vel24big','add mode=p ${SOURCES[0]} |put data_type=csq')
Flow('csq24noah','ocean','add mode=p ${SOURCES[0]} |put data_type=csq')
Flow('csqbig80pct',['csq24big.rsf', 'csq24noah.rsf'],
     'add < ${SOURCES[0]} ${SOURCES[1]} scale=0.8,0.2 > ${TARGETS[0]}')
Flow('csqbig80pct_ext','csqbig80pct',
     'spray < ${SOURCES[0]} axis=3 n=60 d=1.0 o=0.0| ' +
     'put dim=2 gdim=3 id1=0 id2=1 id3=3 ' +
     '> ${TARGETS[0]}')


Flow('dcsq24', ['csq24', 'csq24sm2'],'add mode=a scale=1,-1 < csq24.rsf csq24sm2.rsf |window min1=180| sfpad beg1=8')
Flow('csqext.rsf','csq24sm.rsf', 'sfcat csq24sm.rsf csq24sm.rsf d=1.0 o=0.0 | sfput id1=0 id2=1 id3=3 dim=2 gdim=3',stdin=0)
Flow('dcsqext.rsf','dcsq24.rsf', 'sfcat dcsq24.rsf dcsq24.rsf d=1.0 o=0.0 | sfput id1=0 id2=1 id3=3 dim=2 gdim=3',stdin=0)

# add source coordinates from hdrfile to source AND receiver
# coordinates from wavelet to create "dressed" wavelet for array
# source option in iwave. Note that iwave reads a source GATHER by
# detecting new source coordinates (sx, sy, selev) but assigns source
# trace GRID POSITIONS in the array by receiver coordinates (gx, gy,
# gelev). The towed array app sets these coordinates up so that each
# shot may have an array of sources, with the source traces in the
# same position relative to the data source coordinates - hence
# "towed_array".

# use naming convention: time series stored in wavelet_base,
# headers for experiment foo stored in hdrfoo.su, wavelet in
# waveletfoo.su

for foo in ['line100m']:
    Flow('wavelet_' + foo + '.su', ['wavelet_base.su', foo + '.su'],
         towed_array +
         '''
         data=${SOURCES[1]}
         src=${SOURCES[0]}
         towed=${TARGETS[0]}
         ''',
         stdin=0, stdout=0)

# pre-cooked exes
exe_serial  = {}
exe_getafix = {'platf':'mpi', 'ppn':'16'}
exe_stampede_4hr = {'platf':'stampede','nodes':'2','ppn':'16','wall':'04:00:00'}
exe_stampede_10min = {'platf':'stampede','nodes':'2','ppn':'16','wall':'00:10:00'}
exe_stampede_30min = {'platf':'stampede','nodes':'2','ppn':'16','wall':'00:30:00'}
# choose

#### common setup with "big" smoothing kernel

Flow('bornbigm.su','bornbig.su', linmute + ' input=${SOURCES[0]} output=${TARGETS[0]} mute_slope=0.7 mute_zotime=0 mute_width=200',stdin=0,stdout=0)
Flow('bornbigm2.su','bornbigm.su', linmute + ' input=${SOURCES[0]} output=${TARGETS[0]} mute_slope=0.7 mute_zotime=0 mute_width=200',stdin=0,stdout=0)

jobs_common =
     [
        { 'job': 'bornbig',
          'pre': '/bin/cp ../line100m.su ../bornbig.su',
          'src': ['line100m.su', 'wavelet_line100m.su', 'csq24big.rsf', 'dcsq24.rsf'],
          'tgt': ['bornbig.su'],
          'cmd': acd + ' ' +
     'deriv=1 adjoint=0 order=2 cfl=0.5 cmin=1.0 cmax=6.0 sampord=1 ' +
     'csq=../csq24big.rsf csq_d1=../dcsq24.rsf source=../wavelet_line100m.su ' +
     'data=../bornbig.su partask=' +
          getThreads(exe_stampede_10min),
          'exe': exe_stampede_10min
    },
    { 'job': 'mig_80pct',
          'pre': 'add scale=0.0 < ../csqbig80pct_ext.rsf > ../mig_80pct.rsf',
      'src': ['bornbigm2.su', 'wavelet_line100m.su', 'csqbig80pct_ext.rsf'],
          'tgt': ['mig_80pct.rsf'],
          'cmd': acd + ' ' +
     'deriv=1 adjoint=1 order=2 cfl=0.5 ' +
     'cmin=1.0 cmax=6.0 sampord=1 nsnaps=20 ' +
     'csq=../csqbig80pct_ext.rsf csq_b1=../mig_80pct.rsf ' +
     'source=../wavelet_line100m.su ' +
     'data=../bornbigm2.su partask=' +
          getThreads(exe_stampede_10min),
          'exe': exe_stampede_10min
        },
     ]

##### fixed.pdf computation using Chebyshev and fixed poly

Flow('a_lsmig_80pct_altcheb.rsf', 'lsmig_80pct_altcheb.rsf',
     'add scale=0.0 < ${SOURCES[0]} > ${TARGETS[0]}; ' +
     deriv + ' input=${SOURCES[0]} ' +
     'output=${TARGETS[0]} ' +
     'axis=2 adjoint=0', stdin=0, stdout=0);
Flow('ata_lsmig_80pct_altcheb.rsf', 'a_lsmig_80pct_altcheb.rsf',
     'add scale=0.0 < ${SOURCES[0]} > ${TARGETS[0]}; ' +
     deriv + ' input=${SOURCES[0]} ' +
     'output=${TARGETS[0]} ' +
     'axis=2 adjoint=1', stdin=0, stdout=0);

jobs_cheb_fixed =
     [
    { 'job': 'lsmig_80pct_altcheb',
          'src': ['mig_80pct.rsf', 'wavelet_line100m.su',  'csqbig80pct_ext.rsf'],
          'tgt': ['lsmig_80pct_altcheb.rsf'],
          'pre': 'add scale=0.0 < ../csqbig80pct_ext.rsf > ' +
                 '../lsmig_80pct_altcheb.rsf',
      'cmd': acdaltcheb + ' order=2 cfl=0.5 cmin=1.0 cmax=6.0 ' +
                 'sampord=1 nsnaps=20 csq=../lsmig_80pct_altcheb.rsf ' +
                 'rcsq=../csqbig80pct_ext.rsf icsq=../lsmig_80pct_altcheb.rsf ' +
                 'source=../wavelet_line100m.su rhs=../mig_80pct.rsf ' +
                 'data=../bornbig.su outfile=cheb80pct.out ' +
                 'InversionLevel = 0.04 ResRedn = 0.1 ' +
                 'FudgeFactor = 1.1 ' +
                 'MaxIter = 50 mute_slope=0.7 mute_zotime=0 mute_width=200 ' +
                 'partask=' + getThreads(exe_stampede_30min),
          'exe': exe_stampede_30min
        },
    { 'job': 'q_lsmig_80pct_altcheb',
      'src': ['ata_lsmig_80pct_altcheb.rsf'],
      'tgt': ['q_lsmig_80pct_altcheb.rsf'],
      'pre': 'add scale=0.0 < ../csqbig80pct_ext.rsf > ' +
                 '../q_lsmig_80pct_altcheb.rsf',
      'cmd': acdaltcheb + ' order=2 cfl=0.5 cmin=1.0 cmax=6.0 ' +
                 'sampord=1 nsnaps=20 csq=../lsmig_80pct_altcheb.rsf ' +
                 'rcsq=../csqbig80pct_ext.rsf icsq=../q_lsmig_80pct_altcheb.rsf ' +
                 'source=../wavelet_line100m.su ' +
     'rhs=../ata_lsmig_80pct_altcheb.rsf data=../bornbig.su ' +
                 'outfile=cheb80pct.out ' +
                 'InversionLevel = 0.04 ResRedn = 0.1 ' +
                 'FudgeFactor = 1.1 ' +
                 'MaxIter = 50 mute_slope=0.7 mute_zotime=0 mute_width=200 ' +
                 'partask=' + getThreads(exe_stampede_30min),
          'exe': exe_stampede_30min
        },
     ]

#### smaller smoothing kernel, diva jobs
jobs_100m_diva =
     [
        { 'job': 'born100m',
          'pre': '/bin/cp ../line100m.su ../born100m.su',
          'src': ['line100m.su', 'wavelet_line100m.su', 'csq24sm.rsf', 'dcsq24.rsf'],
          'tgt': ['born100m.su'],
          'cmd': acd + ' ' +
     'deriv=1 adjoint=0 order=2 cfl=0.5 cmin=1.0 cmax=6.0 sampord=1 ' +
     'csq=../csq24sm.rsf csq_d1=../dcsq24.rsf source=../wavelet_line100m.su ' +
     'data=../born100m.su partask=' +
          getThreads(exe_stampede_10min),
          'exe': exe_stampede_10min
        },
        { 'job': 'ds_grad_100m_2_80pct',
          'src': ['born100m.su', 'wavelet_line100m.su', 'csq24noah.rsf', 'csq24sm.rsf', 'csq24.rsf'],
          'tgt': ['ds100m_2_80pct.rsf'],
          'pre': 'spray < ../csq24.rsf axis=3 n=60 d=1.0 o=0.0| put dim=2 gdim=3 id1=0 id2=1 id3=3 ' +
     '| add scale=1.0 > ../ds100m_2_80pct.rsf && ' +
     'add < ../csq24sm.rsf ../csq24noah.rsf scale=0.8,0.2 > ../csq80pct.rsf && ' +
     'add < ../csq24sm.rsf > ../grad100m_2_80pct.rsf scale=0.0 && ' +
     'add < ../ds100m_2_80pct.rsf > ../nres_2_80pct.rsf scale=0.0',
          'cmd': acddscheb_grad + ' ' +
     'order=2 cfl=0.5 cmin=1.0 cmax=6.0 sampord=1 nsnaps=20 ' +
                 'mute_slope=0.67 mute_zotime=0.0 mute_width=300 ' +
             'csq=../csq80pct.rsf csqext=../ds100m_2_80pct.rsf ' +
             'reflectivity=../ds100m_2_80pct.rsf ' +
     'source=../wavelet_line100m.su ' +
     'grad=../grad100m_2_80pct.rsf ' +
     'normalres=../nres_2_80pct.rsf ' +
             'data=../born100m.su ' +
     'outfile=dsgrad.out Nhval=0 ' +
             'MaxIter = 100 gamma=0.04 epsilon=0.0001 alpha=1.1 ' +
     'dataest = est.su datares = res.su ' +
     'DSWeight=0.01 partask=' +
     getThreads(exe_stampede_4hr),
          'exe': exe_stampede_4hr
        },
        { 'job': 'ds_grad_100m_cg_80pct',
          'src': ['born100m.su', 'wavelet_line100m.su',  'csq24noah.rsf', 'csq24sm.rsf', 'csq24.rsf'],
          'tgt': ['ds100m_cg_80pct.rsf'],
          'pre': 'spray < ../csq24.rsf axis=3 n=60 d=1.0 o=0.0| put dim=2 gdim=3 id1=0 id2=1 id3=3 ' +
     '| add scale=0.0 > ../ds100m_cg_80pct.rsf && ' +
     'add < ../csq24sm.rsf ../csq24noah.rsf scale=0.8,0.2 > ../csq80pct.rsf && ' +
     'add < ../csq24sm.rsf > ../grad100m_cg_80pct.rsf scale=0.0 && ' +
     'add < ../ds100m_cg_80pct.rsf > ../nres_cg_80pct.rsf scale=0.0',
          'cmd': acdds_grad + ' ' +
     'order=2 cfl=0.5 cmin=1.0 cmax=6.0 sampord=1 nsnaps=20 ' +
                 'mute_slope=0.7 mute_zotime=0.0 mute_width=300 ' +
             'csq=../csq80pct.rsf csqext=../ds100m_cg_80pct.rsf ' +
             'reflectivity=../ds100m_cg_80pct.rsf ' +
     'source=../wavelet_line100m.su ' +
     'grad=../grad100m_cg_80pct.rsf ' +
     'normalres=../nres_cg_80pct.rsf ' +
             'data=../born100m.su ' +
     'outfile=dsgrad.out Nhval=0 ' +
             'MaxIter = 200 ResidualTol=0.01 GradientTol=0.001 ' +
     'dataest = est.su datares = res.su ' +
     'DSWeight=0.01 partask=' +
     getThreads(exe_stampede_4hr),
          'exe': exe_stampede_4hr
        },
        { 'job': 'ds_grad_100mem3_cg_80pct',
          'src': ['born100m.su', 'wavelet_line100m.su',  'csq24noah.rsf', 'csq24sm.rsf', 'csq24.rsf'],
          'tgt': ['ds100mem3_cg_80pct.rsf'],
          'pre': 'spray < ../csq24.rsf axis=3 n=60 d=1.0 o=0.0| put dim=2 gdim=3 id1=0 id2=1 id3=3 ' +
     '| add scale=0.0 > ../ds100mem3_cg_80pct.rsf && ' +
     'add < ../csq24sm.rsf ../csq24noah.rsf scale=0.8,0.2 > ../csq80pct.rsf && ' +
     'add < ../csq24sm.rsf > ../grad100mem3_cg_80pct.rsf scale=0.0 && ' +
     'add < ../ds100mem3_cg_80pct.rsf > ../nresem3_cg_80pct.rsf scale=0.0',
          'cmd': acdds_grad + ' ' +
     'order=2 cfl=0.5 cmin=1.0 cmax=6.0 sampord=1 nsnaps=20 ' +
                 'mute_slope=0.7 mute_zotime=0.0 mute_width=300 ' +
             'csq=../csq80pct.rsf csqext=../ds100mem3_cg_80pct.rsf ' +
             'reflectivity=../ds100mem3_cg_80pct.rsf ' +
     'source=../wavelet_line100m.su ' +
     'grad=../grad100mem3_cg_80pct.rsf ' +
     'normalres=../nresem3_cg_80pct.rsf ' +
             'data=../born100m.su ' +
     'outfile=dsgrad.out Nhval=0 ' +
             'MaxIter = 200 ResidualTol=0.01 GradientTol=0.001 ' +
     'dataest = est.su datares = res.su ' +
     'DSWeight=0.001 partask=' +
     getThreads(exe_stampede_4hr),
          'exe': exe_stampede_4hr
        },
        { 'job': 'ds_grad_big_cg_80pct',
          'src': ['bornbig.su', 'wavelet_line100m.su',  'csq24noah.rsf', 'csq24big.rsf', 'csq24.rsf'],
          'tgt': ['dsbig_cg_80pct.rsf'],
          'pre': 'spray < ../csq24.rsf axis=3 n=60 d=1.0 o=0.0| put dim=2 gdim=3 id1=0 id2=1 id3=3 ' +
     '| add scale=0.0 > ../dsbig_cg_80pct.rsf && ' +
     'add < ../csq24big.rsf ../csq24noah.rsf scale=0.8,0.2 > ../csqbig80pct.rsf && ' +
     'add < ../csq24sm.rsf > ../gradbig_cg_80pct.rsf scale=0.0 && ' +
     'add < ../dsbig_cg_80pct.rsf > ../nresbig_cg_80pct.rsf scale=0.0',
          'cmd': acdds_grad + ' ' +
     'order=2 cfl=0.5 cmin=1.0 cmax=6.0 sampord=1 nsnaps=20 ' +
                 'mute_slope=0.7 mute_zotime=0.0 mute_width=300 ' +
             'csq=../csqbig80pct.rsf csqext=../dsbig_cg_80pct.rsf ' +
             'reflectivity=../dsbig_cg_80pct.rsf ' +
     'source=../wavelet_line100m.su ' +
     'grad=../gradbig_cg_80pct.rsf ' +
     'normalres=../nresbig_cg_80pct.rsf ' +
             'data=../bornbig.su ' +
     'outfile=dsgrad.out Nhval=0 ' +
             'MaxIter = 200 ResidualTol=0.01 GradientTol=0.001 ' +
     'dataest = est.su datares = res.su ' +
     'DSWeight=0.01 partask=' +
     getThreads(exe_stampede_4hr),
          'exe': exe_stampede_4hr
        },
        { 'job': 'ds_grad_bigem1_cg_80pct',
          'src': ['bornbig.su', 'wavelet_line100m.su',  'csq24noah.rsf', 'csq24big.rsf', 'csq24.rsf'],
          'tgt': ['dsbigem1_cg_80pct.rsf'],
          'pre': 'spray < ../csq24.rsf axis=3 n=60 d=1.0 o=0.0| put dim=2 gdim=3 id1=0 id2=1 id3=3 ' +
     '| add scale=0.0 > ../dsbigem1_cg_80pct.rsf && ' +
     'add < ../csq24big.rsf ../csq24noah.rsf scale=0.8,0.2 > ../csqbig80pct.rsf && ' +
     'add < ../csq24sm.rsf > ../gradbigem1_cg_80pct.rsf scale=0.0 && ' +
     'add < ../dsbig_cg_80pct.rsf > ../nresbigem1_cg_80pct.rsf scale=0.0',
          'cmd': acdds_grad + ' ' +
     'order=2 cfl=0.5 cmin=1.0 cmax=6.0 sampord=1 nsnaps=20 ' +
                 'mute_slope=0.7 mute_zotime=0.0 mute_width=300 ' +
             'csq=../csqbig80pct.rsf csqext=../dsbigem1_cg_80pct.rsf ' +
             'reflectivity=../dsbigem1_cg_80pct.rsf ' +
     'source=../wavelet_line100m.su ' +
     'grad=../gradbigem1_cg_80pct.rsf ' +
     'normalres=../nresbigem1_cg_80pct.rsf ' +
             'data=../bornbig.su ' +
     'outfile=dsgrad.out Nhval=0 ' +
             'MaxIter = 200 ResidualTol=0.01 GradientTol=0.001 ' +
     'dataest = est.su datares = res.su ' +
     'DSWeight=0.1 partask=' +
     getThreads(exe_stampede_4hr),
          'exe': exe_stampede_4hr
        },
        { 'job': 'ds_grad_bigem3_cg_80pct',
          'src': ['bornbig.su', 'wavelet_line100m.su',  'csq24noah.rsf', 'csq24sm.rsf', 'csq24.rsf'],
          'tgt': ['dsbigem3_cg_80pct.rsf'],
          'pre': 'spray < ../csq24.rsf axis=3 n=60 d=1.0 o=0.0| put dim=2 gdim=3 id1=0 id2=1 id3=3 ' +
     '| add scale=0.0 > ../dsbigem3_cg_80pct.rsf && ' +
     'add < ../csq24big.rsf ../csq24noah.rsf scale=0.8,0.2 > ../csqbig80pct.rsf && ' +
     'add < ../csq24sm.rsf > ../gradbigem3_cg_80pct.rsf scale=0.0 && ' +
     'add < ../dsbigem3_cg_80pct.rsf > ../nresbigem3_cg_80pct.rsf scale=0.0',
          'cmd': acdds_grad + ' ' +
     'order=2 cfl=0.5 cmin=1.0 cmax=6.0 sampord=1 nsnaps=20 ' +
                 'mute_slope=0.7 mute_zotime=0.0 mute_width=300 ' +
             'csq=../csqbig80pct.rsf csqext=../dsbigem3_cg_80pct.rsf ' +
             'reflectivity=../dsbigem3_cg_80pct.rsf ' +
     'source=../wavelet_line100m.su ' +
     'grad=../gradbigem3_cg_80pct.rsf ' +
     'normalres=../nresbigem3_cg_80pct.rsf ' +
             'data=../bornbig.su ' +
     'outfile=dsgrad.out Nhval=0 ' +
             'MaxIter = 200 ResidualTol=0.01 GradientTol=0.001 ' +
     'dataest = est.su datares = res.su ' +
     'DSWeight=0.001 partask=' +
     getThreads(exe_stampede_4hr),
          'exe': exe_stampede_4hr
        },
       ]

# loop for jobs defined in jobs dictionary
for jobs in ['jobs_common', 'jobs_cheb_fixed', 'jobs_cg', 'jobs_100m_diva']:
    for i in range(len(jobs)):
        sig = getFlowSignature(jobs[i]['job']+'.work',jobs[i], penv)
        if sig == None:
           print('Error return from iwave.getFlowSignature - cannot set up job = ' + i)
        else:
             Flow(sig['tgt'], sig['src'], sig['cmd'], stdin=0, stdout=0, workdir=sig['dir'])

End()
